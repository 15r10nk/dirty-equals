name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize]

jobs:
  test:
    name: test py${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.8', '3.9', '3.10']

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v2
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}

    - if: steps.cache.outputs.cache-hit != 'true'
      run: pip install poetry

    - if: steps.cache.outputs.cache-hit != 'true'
      run: poetry plugin add poetry-version-plugin

    - if: steps.cache.outputs.cache-hit != 'true'
      run: poetry install

    - run: make lint
    - run: make mypy

    - run: make test

    - run: poetry run coverage xml

    - uses: codecov/codecov-action@v2.1.0
      with:
        file: ./coverage.xml
        env_vars: PYTHON,OS

  deploy:
    needs:
      - test
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: set up python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'

      - name: set version
        run: VERSION_PATH='dirty_equals/version.py' python <(curl -Ls https://git.io/JT3rm)

      - run: pip install poetry
      - run: poetry plugin add poetry-version-plugin

      - run: poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.pypi_token }}
